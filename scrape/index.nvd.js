// scrape/index.nvd.js

const axios = require('axios');
const cheerio = require('cheerio');

const siteUrl = 'https://nvd.nist.gov/vuln/detail/';
const scrapeData = async (cve) => {
	const response = await axios(siteUrl + cve);
	const $ = cheerio.load(response.data);

	const tableRows = $('table[data-testid="vuln-hyperlinks-table"]').find('tbody > tr');
	const cweTableRows = $('table[data-testid="vuln-CWEs-table"]').find('tbody > tr');

	// cve id is not available
	if ($('p[data-testid="service-unavailable-msg"]').next().text()) {
		return false;
	}

	let result = {
		name: cve,
		nvd: { description: $('p[data-testid="vuln-description"]').text(), link: siteUrl + cve },
	};
	for (let tableRow of tableRows) {
		const tds = $(tableRow).find('td');

		// check for 'Vendor Advisory' badge
		const spans = $(tds[1])
			.find('span.badge')
			.filter((j, s) => s.childNodes[0].data === 'Vendor Advisory');

		if (spans.length > 0 && $(tds[0]).find('a').attr('href').includes('wso2')) {
			const wso2Response = await axios($(tds[0]).find('a').attr('href'));
			const $wso2 = cheerio.load(wso2Response.data);

			const pElems = $wso2('div#main-content').find('p');
			let gitlinks = [];
			$wso2('div#main-content')
				.find('a')
				.map((x, hyper) => {
					if ($wso2(hyper).attr('href').includes('github')) gitlinks.push($wso2(hyper).attr('href'));
				});
			$wso2(pElems[6]).find('br').replaceWith('\n');

			result['nvd']['wso2'] = $(tds[0]).find('a').attr('href');
			result['wso2'] = {
				published: $wso2(pElems[0]).text(),
				products: $wso2(pElems[6]).text().split('\n'),
				git: gitlinks,
			};
		}
	}

	let cwes = [];
	for (let cweTableRow of cweTableRows) {
		const cweTds = $(cweTableRow).find('td');
		cwes.push($(cweTds[0]).find('a').text());
	}

	result['cwes'] = cwes;
	return result;
};

exports.scrapeData = scrapeData;
